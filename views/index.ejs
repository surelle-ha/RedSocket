<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Socket.io Client</title>
		<!-- Include Bootstrap CSS from CDN -->
		<link
			rel="stylesheet"
			href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"
		/>
		<!-- Include the Socket.io client library from CDN -->
		<script src="https://cdn.socket.io/4.0.1/socket.io.min.js"></script>
		<script>
			document.addEventListener("DOMContentLoaded", () => {
				const socket = io("ws://localhost:4000");
				const beautifyButton = document.getElementById("beautify-button");
				const subscribeButton = document.getElementById("subscribe-button");
				const channelInput = document.getElementById("channel-input");
				const subscribedChannelsTableBody = document.getElementById(
					"subscribed-channels-body"
				);
				const messagesTableBody = document.getElementById("table-body");
				let beautify = true;

				// Load subscribed channels from localStorage on page load
				const loadSubscribedChannels = () => {
					const channels =
						JSON.parse(localStorage.getItem("subscribedChannels")) || [];
					channels.forEach((channel) => {
						socket.emit("subscribe", channel);
						addSubscribedChannelRow(channel);
					});
				};

				// Save subscribed channels to localStorage
				const saveSubscribedChannels = (channels) => {
					localStorage.setItem("subscribedChannels", JSON.stringify(channels));
				};

				// Get the list of subscribed channels from the table
				const getSubscribedChannels = () => {
					return Array.from(
						subscribedChannelsTableBody.querySelectorAll("tr")
					).map((row) => row.cells[0].textContent);
				};

				// Function to format JSON data
				const formatJson = (data) => JSON.stringify(data, null, 2);

				// Function to handle data row creation
				const addDataRow = (data) => {
					const row = document.createElement("tr");
					const uuid = crypto.randomUUID();
					const formattedData = beautify
						? formatJson(data)
						: JSON.stringify(data);
					const timestamp = new Date().toLocaleString();

					row.innerHTML = `
                    <td>${uuid}</td>
                    <td>${data.channel}</td>
                    <td><pre class="json-data">${formattedData}</pre></td>
                    <td>${timestamp}</td>
                `;
					messagesTableBody.appendChild(row);
				};

				// Function to handle subscribed channel row creation
				const addSubscribedChannelRow = (channel) => {
					const row = document.createElement("tr");
					row.innerHTML = `
                    <td>${channel}</td>
                    <td><button class="btn btn-danger btn-sm unsubscribe-btn">Unsubscribe</button></td>
                `;
					subscribedChannelsTableBody.appendChild(row);
				};

				// Function to check if a channel is already subscribed
				const isChannelSubscribed = (channel) => {
					return getSubscribedChannels().includes(channel);
				};

				// Function to show modal
				const showModal = (message) => {
					const modalTitle = document.getElementById("modal-title");
					const modalBody = document.getElementById("modal-body");
					modalTitle.textContent = "Notification";
					modalBody.textContent = message;
					$("#notification-modal").modal("show");
				};

				// Listen for messages from the server
				socket.on("redis_message", (data) => {
					console.log("Received message:", data);
					addDataRow(data);
				});

				// Toggle beautify mode
				beautifyButton.addEventListener("click", () => {
					beautify = !beautify;
					// Update existing rows
					document.querySelectorAll(".json-data").forEach((pre) => {
						const json = JSON.parse(pre.textContent);
						pre.textContent = beautify
							? formatJson(json)
							: JSON.stringify(json);
					});
				});

				// Handle channel subscription
				subscribeButton.addEventListener("click", () => {
					const channel = channelInput.value.trim();
					if (channel && !isChannelSubscribed(channel)) {
						socket.emit("subscribe", channel);
						addSubscribedChannelRow(channel);

						// Save the updated list of channels to localStorage
						saveSubscribedChannels(getSubscribedChannels());
						console.log(`Subscribed to channel: ${channel}`);
					} else if (isChannelSubscribed(channel)) {
						showModal("Channel is already subscribed.");
					}
				});

				// Event delegation for unsubscribe buttons
				subscribedChannelsTableBody.addEventListener("click", (event) => {
					if (event.target.classList.contains("unsubscribe-btn")) {
						const channel = event.target.closest("tr").cells[0].textContent;
						socket.emit("unsubscribe", channel);
						subscribedChannelsTableBody.removeChild(event.target.closest("tr"));

						// Save the updated list of channels to localStorage
						saveSubscribedChannels(getSubscribedChannels());
						console.log(`Unsubscribed from channel: ${channel}`);
					}
				});

				// Load subscribed channels when the page loads
				loadSubscribedChannels();
			});
		</script>

		<style>
			/* Removed dark mode styling */
			.json-data {
				white-space: pre-wrap; /* Allows JSON to wrap within the cell */
				word-break: break-all; /* Break long words if necessary */
			}
		</style>
	</head>
	<body>
		<!-- Navbar -->
		<nav class="navbar navbar-expand-lg navbar-light bg-light">
			<a class="navbar-brand" href="#">Socket.io Client</a>
		</nav>

		<div class="container">
			<h1 class="mt-4">Socket.io Client</h1>

			<!-- Subscribe Section -->
			<div class="mb-4">
				<button id="beautify-button" class="btn btn-primary">
					Toggle Beautify
				</button>
				<div class="form-group mt-2">
					<input
						type="text"
						id="channel-input"
						class="form-control"
						placeholder="Enter channel name"
					/>
					<button id="subscribe-button" class="btn btn-success mt-2">
						Subscribe
					</button>
				</div>
			</div>

			<!-- Bootstrap grid layout for tables -->
			<div class="row">
				<div class="col-md-6">
					<h2 class="mt-4">Subscribed Channels</h2>
					<table class="table table-striped">
						<thead>
							<tr>
								<th>Channel</th>
								<th>Action</th>
							</tr>
						</thead>
						<tbody id="subscribed-channels-body">
							<!-- Subscribed channels rows will be appended here -->
						</tbody>
					</table>
				</div>
				<div class="col-md-6"></div>
				<h2 class="mt-4">Messages</h2>
				<table class="table table-striped">
					<thead>
						<tr>
							<th>ID</th>
							<th>Channel</th>
							<th>Data</th>
							<th>Timestamp</th>
						</tr>
					</thead>
					<tbody id="table-body">
						<!-- Data rows will be appended here -->
					</tbody>
				</table>
			</div>
		</div>

		<!-- Notification Modal -->
		<div
			class="modal fade"
			id="notification-modal"
			tabindex="-1"
			role="dialog"
			aria-labelledby="modal-title"
			aria-hidden="true"
		>
			<div class="modal-dialog" role="document">
				<div class="modal-content">
					<div class="modal-header">
						<h5 class="modal-title" id="modal-title">Notification</h5>
						<button
							type="button"
							class="close"
							data-dismiss="modal"
							aria-label="Close"
						>
							<span aria-hidden="true">&times;</span>
						</button>
					</div>
					<div class="modal-body" id="modal-body">
						<!-- Notification message will be inserted here -->
					</div>
					<div class="modal-footer">
						<button
							type="button"
							class="btn btn-secondary"
							data-dismiss="modal"
						>
							Close
						</button>
					</div>
				</div>
			</div>
		</div>

		<!-- Include Bootstrap JS and dependencies from CDN -->
		<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
		<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
		<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
	</body>
</html>
